datasource db {
    url = env("POSTGRES_CONNECTION_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

model Configuration {
    id                                      String @id @default("default") @map("id")

    // Chains
    chainOverrides                          String? @map("chainOverrides")
    
    // Tx Processing 
    minTxsToProcess                         Int     @map("minTxsToProcess")
    maxTxsToProcess                         Int     @map("maxTxsToProcess")
    
    // Tx Updates
    minedTxListenerCronSchedule             String? @map("minedTxListenerCronSchedule")
    maxTxsToUpdate                          Int     @map("maxTxsToUpdate")
    
    // Tx Retries
    retryTxListenerCronSchedule             String? @map("retryTxListenerCronSchedule")
    minEllapsedBlocksBeforeRetry            Int     @map("minEllapsedBlocksBeforeRetry")
    maxFeePerGasForRetries                  Int     @map("maxFeePerGasForRetries")
    maxPriorityFeePerGasForRetries          Int     @map("maxPriorityFeePerGasForRetries")
    maxRetriesPerTx                         Int     @map("maxRetriesPerTx")
    
    // Contract Indexer Updates
    indexerListenerCronSchedule             String? @map("indexerListenerCronSchedule")
    maxBlocksToIndex                        Int     @default(25) @map("maxBlocksToIndex")
    cursorDelaySeconds                      Int     @default(2) @map("cursorDelaySeconds)
    contractSubscriptionsRetryDelaySeconds  String  @default("10") @map("contractSubscriptionsRetryDelaySeconds)

    walletSubscriptionsCronSchedule         String? @map("walletSubscriptionsCronSchedule")

    // Wallet provider specific configurations, non-credential
    walletProviderConfigs                   Json @default({}) @map("walletProviderConfigs")

    // Legacy wallet provider credentials
    // Use default credentials instead, and store non-credential waller provider configurations in walletProviderConfigs
    // AWS
    awsAccessKeyId                          String? @map("awsAccessKeyId")
    awsSecretAccessKey                      String? @map("awsSecretAccessKey")
    awsRegion                               String? @map("awsRegion")
    
    // GCP
    gcpApplicationProjectId                 String? @map("gcpApplicationProjectId")
    gcpKmsLocationid                        String? @map("gcpKmsLocationid")
    gcpKmsKeyRingId                         String? @map("gcpKmsKeyRingId")
    gcpAplicationCredentialEmail            String? @map("gcpAplicationCredentialEmail")
    gcpAplicationCredentialPrivateKey       String? @map("gcpAplicationCredentialPrivateKey")

    // Auth
    authDomain                              String? @map("authDomain")
    authWalletEncryptedJson                 String? @map("authWalletEncryptedJson")

    // Webhook
    webhookUrl                              String? @default("") @map("webhookUrl")
    webhookAuthBearerToken                  String? @default("") @map("webhookAuthBearerToken")

    // Wallet balance
    minWalletBalance                        String @default("2000000000000000000") @map("minWalletBalance")
    accessControlAllowOrigin                String? @default("https://thirdweb.com, https://embed.ipfscdn.io") @map("accessControlAllowOrigin")
    ipAllowList                             String? @default("") @map("ipAllowList")
    clearCacheCronSchedule                  String? @default("") @map("clearCacheCronSchedule")

    // mTLS support 
    mtlsCertificateEncrypted                String?
    mtlsPrivateKeyEncrypted                 String?

    @@map("configuration")
}

mode Permissions {
    walletAddress   String @id @map("walletAddress")
    permissions     String @map("permissions")
    label           String? @map("label")

    @@map("permissions")
}

model Tokens {
    id              String @id @map("id")
    tokenMask       String @map("tokenMask")
    walletAddress   String @map("walletAddress")
    createdAt       DateTime @default(now()) @map("createdAt")
    expiresAt       DateTime @map("expiresAt")
    revokedAt       DateTime? @map("revokedAt")
    isAccessToken   Boolean @map("isAccessToken")
    label           String? @map("label")

    @@map("tokens")
}

model WalletDetails {
    address                 String @id @map("address")
    type                    String @map("type")
    label                   String? @map("label")

    // Local
    encryptedJson           String? @map("encryptedJson")

    // New approach: platform identifiers + wallet credentials
    platformIdentifiers     Json? @map("platformIdentifiers")
    credentialId            String? @map("credentialId")
    credential              WalletCredentials? @relation(fields: [credentialId], references: [id])

    // Legacy AWS KMS fields - use platformIdentifiers + WalletCredentials for new wallets
    awsKmsKeyId             String? @map("awsKmsKeyId")
    awsKmsArn               String? @map("awsKmsArn")
    awsKmsSecretAccessKey   String? @map("awsKmsSecretAccessKey")

    // GCP 
    gcpKmsKeyRingId         String? @map("gcpKmsKeyRingId")
    gcpKmsKeyId             String? @map("gcpKmsKeyId")
    gcpKmsLocationId        String? @map("gcpKmsLocationId")
    gcpKmsResourcePath      String? @map("gcpKmsResourcePath")
    gcpApplicationCredentialEmail String? @map("gcpApplicationCredentialEmail")
    gcpApplicationCredentialPrivateKey String? @map("gcpApplicationCredentialPrivateKey")

    // Smart Backend Wallet
    accountSignerAddress    String? @map("accountSignerAddress")
    accountFactoryAddress   String? @map("accountFactoryAddress")
    entrypointAddress       String? @map("entrypointAddress")
    
    

    @@map("wallet_details")
}

model WalletCredentials {
    id          String @id @default(cuid())
    type        String
    label       String
    data        Json
    isDefault   Boolean? @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    deletedAt   DateTime?
    wallets     WalletDetails[]


    // A maximum of one default credential per type
    @@unique([type, isDefault], name: "unique_default_per_type", map: "wallet_credentials_type_is_default_key")
    @@index([type])
    @@map("wallet_credentials")
    
}


model WalletNonce {
    address     String @map("address")
    chainId     String @map("chainId")
    nonce       Int @default(0) @map("nonce")

    @@id([address, chainId])
    @@map("wallet_nonce")
}

model Transactions {
    id          String @id @default(uuid()) @map("id")
    // Backward compatibility: default to db-generated UUID.
    idempotencyKey String  @unique @default(dbgenerated("gen_random_uuid()")) @map("idempotencyKey")
    groupId         String? @map("groupId")
    chainId         String @map("chainId")
    // Shared 
    data            String? @map("data")
    value           String? @map("value")
    gasLimit        String? @map("gasLimit")
    nonce           Int @map("nonce")
    maxFeePerGas    String? @map("maxFeePerGas")
    maxPriorityFeePerGas String? @map("maxPriorityFeePerGas")
    // Transaction WalletDetails
    fromAddress     String? @map("fromAddress")
    toAddress       String? @map("toAddress")
    gasPrice        String? @map("gasPrice")
    transactionType Int? @map("transactionType")
    transactionHash String? @map("transactionHash")
    onChainTxStatus Int? @map("onChainTxStatus")
    // User Operation
    signerAddress   String? @map("signerAddress")
    accountAddress  String? @map("accountAddress")
    target          String? @map("target")
    sender          String? @map("sender")
    initCode        String? @map("initCode")
    callData        String? @map("callData")
    callGasLimit    String? @map("callGasLimit")
    verificationGasLimit String? @map("verificationGasLimit")
    preVerificationGas String? @map("preVerificationGas")
    paymasterAndData String? @map("paymasterAndData")
    userOpHash      String? @map("userOpHash")
   // Enriched Data 
   functionName    String? @map("functionName")
   functionArgs    String? @map("functionArgs")
   extension       String? @map("extension")
   // TODO: These shouldn't be here 
   deployedContractAddress String? @map("deployedContractAddress")
   deployedContractType String? @map("deployedContractType")
   // Timestamps
   queueAt         DateTime? @default(now()) @map("queueAt")
   // @deprecated
   processedAt     DateTime? @map("processedAt")
   sentAt          DateTime? @map("sentAt")
   minedAt         DateTime? @map("minedAt")
   cancelledAt     DateTime? @map("cancelledAt")
   // Retries 
   retryCount      Int @default(0) @map("retryCount")
   retryGasValues   Boolean? @default(false) @map("retryGasValues")
   retryMaxPriorityFeePerGas String? @map("retryMaxPriorityFeePerGas")
   retryMaxFeePerGas String? @map("retryMaxFeePerGas")
   // Error
   errorMessage    String? @map("errorMessage")
   // Block Numbers 
   sentAtBlockNumber Int? @map("sentAtBlockNumber")
   blockNumber     Int? @map("blockNumber")

   @@index([sentAt, minedAt, cancelledAt, errorMessage, queueAt])
   @@index([sentAt, accountAddress, userOpHash, minedAt, errorMessage, retryCount])
   @@index([sentAt, transactionHash, accountAddress, minedAt, errorMessage, retryCount])
   @@index([queueAt])
   @@map("transactions")
}


model Webhooks {
    id                          Int @id @default(autoincrement()) @map("id")
    name                        String? @map("name")
    url                         String @map("url")
    secret                      String? @map("secret")
    eventType                   String @map("eventType")
    createdAt                   DateTime @default(now()) @map("createdAt")
    updatedAt                   DateTime @updatedAt @map("updatedAt")
    revokedAt                   DateTime? @map("revokedAt")
    ContractSubscriptions         ContractSubscriptions[]
    WalletSubscriptions           WalletSubscriptions[]

    @@map("webhooks")
}

model Relayers {
    id                                      String @id @default(cuid()) @map("id")
    name                                    String @map("name")
    chainId                                 String @map("chainId")
    backendWalletAddress                    String @map("backendWalletAddress")
    allowedContracts                        String @map("allowedContracts")
    allowedForwarders                       String @map("allowedForwarders")

    @@map("relayers")
}

model ContractSubscriptions {
    id                  String  @id @default(uuid()) @map("id")
    chainId             String
    contractAddress     String
    webhookId           Int?
    processEventLogs    Boolean @default(true)
    filterEvents        String[] @default([]) // empty array = no filter
    processTransactionReceipts Boolean @default(true)
    filterFunctions        String[] @default([]) // empty array = no filter

    createdAt           DateTime @default(now())
    updatedAt           DateTime  @updatedAt
    deletedAt           DateTime?

    webhook Webhooks? @relation(fields: [webhookId], references: [id], onDelete: SetNull)

    // optimize distinct lookups
    @@index([chainId])
    @@map("contract_subscriptions")
}

model ContractEventLogs {
    chainId             String
    blockNumber         Int 
    contractAddress     String 
    transactionHash     String
    topic0              String?
    topic1              String?
    topic2              String?
    topic3              String?
    data                String
    eventName           String?
    decodedLog          Json?
    timestamp           DateTime    
    transactionIndex    Int?
    logIndex            Int?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    deletedAt           DateTime?

    @@id([transactionHash, logIndex])
    @@index([timestamp])
    @@index([blockNumber])
    @@index([contractAddress])
    @@index([topic0])
    @@index([topic1])
    @@index([topic2])
    @@index([topic3])
    @@map("contract_event_logs")
}


model WalletSubscriptions {
    id                  String  @id @default(uuid()) @map("id")
    chainId             String
    walletAddress       String

    conditions          Json[]

    webhookId           Int?
    webhook Webhooks? @relation(fields: [webhookId], references: [id], onDelete: SetNull)

    createdAt           DateTime @default(now())
    updatedAt           DateTime  @updatedAt
    deletedAt           DateTime?

    @@index([chainId])
    @@index([walletAddress])
    @@map("wallet_subscriptions")
}
    

model ContractTransactionReceipts {
    chainId             String
    blockNumber         Int
    contractAddress     String
    contractId          String 
    transactionHash     String
    blockHash           String
    timestamp           DateTime
    data                String
    functionName        String?

    to                  String
    from                String
    value               String  
    transactionIndex    Int

    gasUsed             String
    effectiveGasPrice   String
    status              Int

    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    @@index([chainId, transactionHash])
    @@index([contractId, timestamp])
    @@index([contractId, blockNumber])
    @@map("contract_transaction_receipts")
}


model ChainIndexers {
    chainId     String @id
    lastIndexedBlock    Int

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@map("chain_indexers")
}


model KeyPairs {
    hash                        String @id
    publicKey                   String 
    algorithm                   String
    label                       String
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt

    @@map("key_pairs")
}